#!/usr/bin/env python
#rapr xml test - recreate basic rapr dictionary
#@author bkatz - 6/12/2014

from xml.etree import ElementTree as ElemTree
from xml.etree.ElementTree import Element, SubElement, Comment
from xml.dom import minidom

#hard-coded xml generation
def main():
    top = Element('namespace')
    comment = Comment('Generated by xml parser tool')
    top.append(comment)
    label = SubElement(top, 'label')
    label.text = 'DEFAULT'
    i1 = SubElement(top, 'item')
    f1 = SubElement(i1, 'field')
    f1.text = 'LOCALHOST'
    v1 = SubElement(i1, 'value')
    v1.text = '127.0.0.1'
    i2 = SubElement(top, 'item')
    f2 = SubElement(i2, 'field')
    f2.text = 'LISTEN_PORT'
    v2 = SubElement(i2, 'value')
    v2.text = '4001'
    i3 = SubElement(top, 'item')
    f3 = SubElement(i3, 'field')
    f3.text = 'SEND_PORT'
    v3 = SubElement(i3, 'value')
    v3.text = '4001'
    i4 = SubElement(top, 'item')
    f4 = SubElement(i4, 'field')
    f4.text = 'INTERFACE'
    v4 = SubElement(i4, 'value')
    v4.text = 'eth0'

    print prettify(top)

#Found online at google code by spatialguru
def prettify(elem):
        """Return a pretty-printed XML string for the Element.
        """
        rough_string = ElemTree.tostring(elem, 'utf-8')
        reparsed = minidom.parseString(rough_string)
        return reparsed.toprettyxml(indent="  ")


if __name__ == "__main__":
    main()

